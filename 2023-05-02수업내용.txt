동적 <>
DDL DML DCL
CREATE TABLE member(아이디, 비밀번호)

기본타입을 제외한 전부 참조타입
    스택값		      stack주소 -> heapdp 값을 저장
*(고정)배열 : 1차원(for)
[]

for, forEach(향상된 for)
-----------------------------------------------------------------
1.배열생성 - 값을 초기화
for


2.method() 배열처리

------------------------------------------------------------------

ch07
Field_Ex

객체 구성 요소
1.field : 저장 변수
2. Constructor
3. Getter, Setter
4. Method

------------------------------------------------------------------
Field

상속
인사과 : userid, passwd, insaCode

자재과 : userid, passwd, jajaeCode

유지/보수 or 많은 사람과 작업
오버로딩(overload)
1. 메소드 이름은 같지만 리턴타입이 다르거나 매개변수 개수가 다를 때
   생성자 오버로딩, 메소드 오버로딩
public int add(), public double add()

오버라이딩(overriding)
1. 공통적으로 쓰는 모듈(코드)를 분리 시킨 후
필요한 클래스에서 extends를 이용해서 가져다 쓰는 것
2. 이름, 매개변수는 바꾸지 말고 중괄호 안의 내용은 마음대로 바꿔도 됨


---------------------------------------------------------------------------------

강제성
추상화 + interface
상속(extends) +Overriding
** Human 클래스 만들어서 공통모듈 작업(Parent)

1. 학생 이름, 나이를 등록하는 프로그램 : 필드
    - 메소드() : 밥먹기(), 잠자기() : eat(), sleep()
    - username, age

2. 일반인 이름, 나이를 등록하는 프로그램
    - 메소드() : 밥먹기(), 잠자기() : est(), sleep() 
    - username, age
----------------------------------------------------------------------------------

TypeCasting

Poly_Ex

상속
Parent

--------------------------------------------------------------

Override, 다향성
MethodOverride_Ex

웁니다()

새가 웁니다()
고양이가 웁니다()
강아지가 웁니다()
--------------------------------------------------------------

추상화(요약, 공통) abstract = 팀장이 작성
1. 추상화는 본체가 없음. {}X - 이름만 팀장이 정한대로 사용
2. Abstract 리턴타입 메소드명();

CRUD : 입력, 수정, 삭제, 검색
Abstract_Ex


C++ 다중상속

자바는 기본적으로 상속을 여러 곳에서 X

abstract : 강제성
extends : 한번만상속가능 = 단일상속

interface : 강제성
여러번 상속가능 = 다중상속

----------------------------------------------------------------

배열 : 고정배열

Collections 

List(부모) -> ArrayList
List list = new ArrayList
ArrayList list = new ArrayList()

1. 선형리스트(List) : 동적배열
  (1) List<객체명> list = new ArrayList<>();
  (2) 배열명.size() 배열명.add(값 도는 객체) 배열명.remove(값)
2. Map : key(별명), value(값)

------------------------------------------------------------------
웹용 자바
Serviet
Spring Framework
Spring boot
-----------------------------------------------------------------

List 상속 받아서 구현한 것이 
ArrayList
Vector

List<> list = new ArrayList<>();
List<> v = new Vector<>();

갑을 지정할 때는 배열명.add(값 또는 객체)
값을 삭제할 때는 배열명.remove(값 또는 인덱스 번호)
배열 개수를 알아낼 때는 배열명.size()
배열이 비어 있는지를 확인 할때는 배열명.isEmpty 또는 배열명.size == 0
배열 전체를 비울 때는 배열명.clear();

 
















































































































